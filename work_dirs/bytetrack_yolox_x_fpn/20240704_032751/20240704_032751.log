2024/07/04 03:27:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.19 (default, Mar 20 2024, 19:55:45) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1387683259
    GPU 0: NVIDIA GeForce GTX 1650 Ti
    CUDA_HOME: D:\CUDA
    NVCC: Cuda compilation tools, release 12.1, V12.1.66
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.34.31933 版
    GCC: n/a
    PyTorch: 2.3.1
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930154
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.9.7  (built against CUDA 12.2)
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=8.9.7, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.1
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1387683259
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/07/04 03:28:00 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=32, enable=False)
backend_args = None
base_lr = 0.0005
batch_size = 4
custom_hooks = [
    dict(num_last_epochs=10, priority=48, type='YOLOXModeSwitchHook'),
    dict(priority=48, type='SyncNormHook'),
    dict(
        ema_type='ExpMomentumEMA',
        momentum=0.0001,
        priority=49,
        type='EMAHook',
        update_buffers=True),
]
data_root = 'F:\\2024-06-05-ARMOT'
dataset_type = 'MOTChallengeDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, max_keep_ckpts=10, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=False, type='TrackVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scale = (
    1280,
    1280,
)
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
interval = 5
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 80
metainfo = dict(
    classes=('drones', ), palette=[
        (
            220,
            20,
            60,
        ),
    ])
model = dict(
    data_preprocessor=dict(
        batch_augments=[
            dict(
                interval=10,
                random_size_range=(
                    600,
                    1000,
                ),
                size_divisor=32,
                type='BatchSyncRandomResize'),
        ],
        pad_size_divisor=32,
        type='TrackDataPreprocessor',
        use_det_processor=True),
    detector=dict(
        backbone=dict(
            act_cfg=dict(type='Swish'),
            deepen_factor=1.33,
            norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
            out_indices=(
                2,
                3,
                4,
            ),
            spp_kernal_sizes=(
                5,
                9,
                13,
            ),
            type='CSPDarknet',
            use_depthwise=False,
            widen_factor=1.25),
        bbox_head=dict(
            act_cfg=dict(type='Swish'),
            feat_channels=320,
            in_channels=320,
            loss_bbox=dict(
                eps=1e-16,
                loss_weight=5.0,
                mode='square',
                reduction='sum',
                type='IoULoss'),
            loss_cls=dict(
                loss_weight=1.0,
                reduction='sum',
                type='CrossEntropyLoss',
                use_sigmoid=True),
            loss_l1=dict(loss_weight=1.0, reduction='sum', type='L1Loss'),
            loss_obj=dict(
                loss_weight=1.0,
                reduction='sum',
                type='CrossEntropyLoss',
                use_sigmoid=True),
            norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
            num_classes=1,
            stacked_convs=2,
            strides=(
                8,
                16,
                32,
            ),
            type='YOLOXHead',
            use_depthwise=False),
        init_cfg=dict(
            checkpoint=
            'C:\\Users\\ASUS\\.cache\\torch\\hub\\checkpoints\\resnet18-f37072fd.pth',
            type='Pretrained'),
        neck=dict(
            act_cfg=dict(type='Swish'),
            in_channels=[
                320,
                640,
                1280,
            ],
            norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
            num_csp_blocks=4,
            out_channels=320,
            type='YOLOXPAFPN',
            upsample_cfg=dict(mode='nearest', scale_factor=2),
            use_depthwise=False),
        test_cfg=dict(nms=dict(iou_threshold=0.7, type='nms'), score_thr=0.01),
        train_cfg=dict(
            assigner=dict(center_radius=2.5, type='SimOTAAssigner')),
        type='YOLOX'),
    tracker=dict(
        init_track_thr=0.5,
        match_iou_thrs=dict(high=0.1, low=0.5, tentative=0.3),
        motion=dict(type='KalmanFilter'),
        num_frames_retain=30,
        obj_score_thrs=dict(high=0.6, low=0.1),
        type='ByteTracker',
        weight_iou_with_det_scores=True),
    type='ByteTrack')
num_last_epochs = 10
optim_wrapper = dict(
    optimizer=dict(
        lr=0.0005,
        momentum=0.9,
        nesterov=True,
        type='SGD',
        weight_decay=0.0005),
    paramwise_cfg=dict(bias_decay_mult=0.0, norm_decay_mult=0.0),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=1,
        type='QuadraticWarmupLR'),
    dict(
        T_max=70,
        begin=1,
        by_epoch=True,
        convert_to_iter_based=True,
        end=70,
        eta_min=2.5e-05,
        type='CosineAnnealingLR'),
    dict(begin=70, by_epoch=True, end=80, factor=1, type='ConstantLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/test_cocoformat.json',
        data_prefix=dict(img_path='test'),
        data_root='F:\\2024-06-05-ARMOT',
        pipeline=[
            dict(
                transforms=[
                    dict(backend_args=None, type='LoadImageFromFile'),
                    dict(keep_ratio=True, scale=(
                        1280,
                        1280,
                    ), type='Resize'),
                    dict(
                        pad_val=dict(img=(
                            114.0,
                            114.0,
                            114.0,
                        )),
                        size_divisor=32,
                        type='Pad'),
                    dict(type='LoadTrackAnnotations'),
                ],
                type='TransformBroadcaster'),
            dict(type='PackTrackInputs'),
        ],
        test_mode=True,
        type='MOTChallengeDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(type='TrackImgSampler'))
test_evaluator = dict(
    metric=[
        'HOTA',
        'CLEAR',
        'Identity',
    ],
    postprocess_tracklet_cfg=[
        dict(max_num_frames=20, min_num_frames=5, type='InterpolateTracklets'),
    ],
    type='MOTChallengeMetric')
test_pipeline = [
    dict(
        transforms=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1280,
                1280,
            ), type='Resize'),
            dict(
                pad_val=dict(img=(
                    114.0,
                    114.0,
                    114.0,
                )),
                size_divisor=32,
                type='Pad'),
            dict(type='LoadTrackAnnotations'),
        ],
        type='TransformBroadcaster'),
    dict(type='PackTrackInputs'),
]
train_cfg = dict(
    max_epochs=80, type='EpochBasedTrainLoop', val_begin=70, val_interval=1)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        dataset=dict(
            datasets=[
                dict(
                    ann_file='annotations/train_cocoformat.json',
                    data_prefix=dict(img='train'),
                    data_root='F:\\2024-06-05-ARMOT',
                    filter_cfg=dict(filter_empty_gt=True, min_size=32),
                    metainfo=dict(classes=('drones', )),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                    ],
                    type='CocoDataset'),
            ],
            type='ConcatDataset'),
        pipeline=[
            dict(
                bbox_clip_border=False,
                img_scale=(
                    1280,
                    1280,
                ),
                pad_val=114.0,
                type='Mosaic'),
            dict(
                bbox_clip_border=False,
                border=(
                    -640,
                    -640,
                ),
                scaling_ratio_range=(
                    0.1,
                    2,
                ),
                type='RandomAffine'),
            dict(
                bbox_clip_border=False,
                img_scale=(
                    1280,
                    1280,
                ),
                pad_val=114.0,
                ratio_range=(
                    0.8,
                    1.6,
                ),
                type='MixUp'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                clip_object_border=False,
                keep_ratio=True,
                scale=(
                    1280,
                    1280,
                ),
                type='Resize'),
            dict(
                pad_val=dict(img=(
                    114.0,
                    114.0,
                    114.0,
                )),
                size_divisor=32,
                type='Pad'),
            dict(
                keep_empty=False,
                min_gt_bbox_wh=(
                    1,
                    1,
                ),
                type='FilterAnnotations'),
            dict(type='PackDetInputs'),
        ],
        type='MultiImageMixDataset'),
    num_workers=4,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(
        bbox_clip_border=False,
        img_scale=(
            1280,
            1280,
        ),
        pad_val=114.0,
        type='Mosaic'),
    dict(
        bbox_clip_border=False,
        border=(
            -640,
            -640,
        ),
        scaling_ratio_range=(
            0.1,
            2,
        ),
        type='RandomAffine'),
    dict(
        bbox_clip_border=False,
        img_scale=(
            1280,
            1280,
        ),
        pad_val=114.0,
        ratio_range=(
            0.8,
            1.6,
        ),
        type='MixUp'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(
        clip_object_border=False,
        keep_ratio=True,
        scale=(
            1280,
            1280,
        ),
        type='Resize'),
    dict(
        pad_val=dict(img=(
            114.0,
            114.0,
            114.0,
        )), size_divisor=32, type='Pad'),
    dict(keep_empty=False, min_gt_bbox_wh=(
        1,
        1,
    ), type='FilterAnnotations'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/test_cocoformat.json',
        data_prefix=dict(img_path='test'),
        data_root='F:\\2024-06-05-ARMOT',
        pipeline=[
            dict(
                transforms=[
                    dict(backend_args=None, type='LoadImageFromFile'),
                    dict(keep_ratio=True, scale=(
                        1280,
                        1280,
                    ), type='Resize'),
                    dict(
                        pad_val=dict(img=(
                            114.0,
                            114.0,
                            114.0,
                        )),
                        size_divisor=32,
                        type='Pad'),
                    dict(type='LoadTrackAnnotations'),
                ],
                type='TransformBroadcaster'),
            dict(type='PackTrackInputs'),
        ],
        test_mode=True,
        type='MOTChallengeDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(type='TrackImgSampler'))
val_evaluator = dict(
    metric=[
        'HOTA',
        'CLEAR',
        'Identity',
    ],
    postprocess_tracklet_cfg=[
        dict(max_num_frames=20, min_num_frames=5, type='InterpolateTracklets'),
    ],
    type='MOTChallengeMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='TrackLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs\\bytetrack_yolox_x_fpn'

2024/07/04 03:28:04 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/07/04 03:28:04 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(48          ) YOLOXModeSwitchHook                
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(48          ) SyncNormHook                       
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) TrackVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) TrackVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stem.conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stem.conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.3.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.3.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.3.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage1.1.blocks.3.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.3.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.3.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.3.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.3.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.4.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.4.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.4.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.4.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.5.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.5.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.5.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.5.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.6.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.6.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.6.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.6.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.7.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.7.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.7.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.7.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.8.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.8.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.8.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.8.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.9.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.9.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.9.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.9.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.10.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.10.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.10.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.10.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.11.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.11.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.11.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage2.1.blocks.11.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.3.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.3.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.3.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.3.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.4.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.4.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.4.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.4.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.5.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.5.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.5.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.5.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.6.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.6.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.6.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.6.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.7.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.7.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.7.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.7.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.8.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.8.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.8.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.8.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.9.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.9.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.9.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.9.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.10.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.10.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.10.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.10.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.11.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.11.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.11.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage3.1.blocks.11.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.3.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.3.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.3.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.backbone.stage4.2.blocks.3.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.reduce_layers.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.reduce_layers.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.reduce_layers.1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.reduce_layers.1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.3.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.3.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.3.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.0.blocks.3.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.3.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.3.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.3.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.top_down_blocks.1.blocks.3.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.downsamples.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.downsamples.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.downsamples.1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.downsamples.1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.3.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.3.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.3.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.0.blocks.3.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.3.conv1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.3.conv1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.3.conv2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.bottom_up_blocks.1.blocks.3.conv2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.out_convs.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.out_convs.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.out_convs.1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.out_convs.1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.out_convs.2.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.neck.out_convs.2.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.0.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.0.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.0.1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.0.1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.1.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.1.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.1.1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.1.1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.2.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.2.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.2.1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_cls_convs.2.1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.0.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.0.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.0.1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.0.1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.1.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.1.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.1.1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.1.1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.2.0.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.2.0.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.2.1.bn.weight:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_reg_convs.2.1.bn.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_conv_cls.0.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_conv_cls.1.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_conv_cls.2.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_conv_reg.0.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_conv_reg.1.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_conv_reg.2.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_conv_obj.0.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_conv_obj.1.bias:weight_decay=0.0
2024/07/04 03:28:05 - mmengine - INFO - paramwise_options -- detector.bbox_head.multi_level_conv_obj.2.bias:weight_decay=0.0
2024/07/04 03:28:08 - mmengine - INFO - load model from: C:\Users\ASUS\.cache\torch\hub\checkpoints\resnet18-f37072fd.pth
2024/07/04 03:28:08 - mmengine - INFO - Loads checkpoint by local backend from path: C:\Users\ASUS\.cache\torch\hub\checkpoints\resnet18-f37072fd.pth
2024/07/04 03:28:08 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: conv1.weight, bn1.running_mean, bn1.running_var, bn1.weight, bn1.bias, layer1.0.conv1.weight, layer1.0.bn1.running_mean, layer1.0.bn1.running_var, layer1.0.bn1.weight, layer1.0.bn1.bias, layer1.0.conv2.weight, layer1.0.bn2.running_mean, layer1.0.bn2.running_var, layer1.0.bn2.weight, layer1.0.bn2.bias, layer1.1.conv1.weight, layer1.1.bn1.running_mean, layer1.1.bn1.running_var, layer1.1.bn1.weight, layer1.1.bn1.bias, layer1.1.conv2.weight, layer1.1.bn2.running_mean, layer1.1.bn2.running_var, layer1.1.bn2.weight, layer1.1.bn2.bias, layer2.0.conv1.weight, layer2.0.bn1.running_mean, layer2.0.bn1.running_var, layer2.0.bn1.weight, layer2.0.bn1.bias, layer2.0.conv2.weight, layer2.0.bn2.running_mean, layer2.0.bn2.running_var, layer2.0.bn2.weight, layer2.0.bn2.bias, layer2.0.downsample.0.weight, layer2.0.downsample.1.running_mean, layer2.0.downsample.1.running_var, layer2.0.downsample.1.weight, layer2.0.downsample.1.bias, layer2.1.conv1.weight, layer2.1.bn1.running_mean, layer2.1.bn1.running_var, layer2.1.bn1.weight, layer2.1.bn1.bias, layer2.1.conv2.weight, layer2.1.bn2.running_mean, layer2.1.bn2.running_var, layer2.1.bn2.weight, layer2.1.bn2.bias, layer3.0.conv1.weight, layer3.0.bn1.running_mean, layer3.0.bn1.running_var, layer3.0.bn1.weight, layer3.0.bn1.bias, layer3.0.conv2.weight, layer3.0.bn2.running_mean, layer3.0.bn2.running_var, layer3.0.bn2.weight, layer3.0.bn2.bias, layer3.0.downsample.0.weight, layer3.0.downsample.1.running_mean, layer3.0.downsample.1.running_var, layer3.0.downsample.1.weight, layer3.0.downsample.1.bias, layer3.1.conv1.weight, layer3.1.bn1.running_mean, layer3.1.bn1.running_var, layer3.1.bn1.weight, layer3.1.bn1.bias, layer3.1.conv2.weight, layer3.1.bn2.running_mean, layer3.1.bn2.running_var, layer3.1.bn2.weight, layer3.1.bn2.bias, layer4.0.conv1.weight, layer4.0.bn1.running_mean, layer4.0.bn1.running_var, layer4.0.bn1.weight, layer4.0.bn1.bias, layer4.0.conv2.weight, layer4.0.bn2.running_mean, layer4.0.bn2.running_var, layer4.0.bn2.weight, layer4.0.bn2.bias, layer4.0.downsample.0.weight, layer4.0.downsample.1.running_mean, layer4.0.downsample.1.running_var, layer4.0.downsample.1.weight, layer4.0.downsample.1.bias, layer4.1.conv1.weight, layer4.1.bn1.running_mean, layer4.1.bn1.running_var, layer4.1.bn1.weight, layer4.1.bn1.bias, layer4.1.conv2.weight, layer4.1.bn2.running_mean, layer4.1.bn2.running_var, layer4.1.bn2.weight, layer4.1.bn2.bias, fc.weight, fc.bias

missing keys in source state_dict: backbone.stem.conv.conv.weight, backbone.stem.conv.bn.weight, backbone.stem.conv.bn.bias, backbone.stem.conv.bn.running_mean, backbone.stem.conv.bn.running_var, backbone.stage1.0.conv.weight, backbone.stage1.0.bn.weight, backbone.stage1.0.bn.bias, backbone.stage1.0.bn.running_mean, backbone.stage1.0.bn.running_var, backbone.stage1.1.main_conv.conv.weight, backbone.stage1.1.main_conv.bn.weight, backbone.stage1.1.main_conv.bn.bias, backbone.stage1.1.main_conv.bn.running_mean, backbone.stage1.1.main_conv.bn.running_var, backbone.stage1.1.short_conv.conv.weight, backbone.stage1.1.short_conv.bn.weight, backbone.stage1.1.short_conv.bn.bias, backbone.stage1.1.short_conv.bn.running_mean, backbone.stage1.1.short_conv.bn.running_var, backbone.stage1.1.final_conv.conv.weight, backbone.stage1.1.final_conv.bn.weight, backbone.stage1.1.final_conv.bn.bias, backbone.stage1.1.final_conv.bn.running_mean, backbone.stage1.1.final_conv.bn.running_var, backbone.stage1.1.blocks.0.conv1.conv.weight, backbone.stage1.1.blocks.0.conv1.bn.weight, backbone.stage1.1.blocks.0.conv1.bn.bias, backbone.stage1.1.blocks.0.conv1.bn.running_mean, backbone.stage1.1.blocks.0.conv1.bn.running_var, backbone.stage1.1.blocks.0.conv2.conv.weight, backbone.stage1.1.blocks.0.conv2.bn.weight, backbone.stage1.1.blocks.0.conv2.bn.bias, backbone.stage1.1.blocks.0.conv2.bn.running_mean, backbone.stage1.1.blocks.0.conv2.bn.running_var, backbone.stage1.1.blocks.1.conv1.conv.weight, backbone.stage1.1.blocks.1.conv1.bn.weight, backbone.stage1.1.blocks.1.conv1.bn.bias, backbone.stage1.1.blocks.1.conv1.bn.running_mean, backbone.stage1.1.blocks.1.conv1.bn.running_var, backbone.stage1.1.blocks.1.conv2.conv.weight, backbone.stage1.1.blocks.1.conv2.bn.weight, backbone.stage1.1.blocks.1.conv2.bn.bias, backbone.stage1.1.blocks.1.conv2.bn.running_mean, backbone.stage1.1.blocks.1.conv2.bn.running_var, backbone.stage1.1.blocks.2.conv1.conv.weight, backbone.stage1.1.blocks.2.conv1.bn.weight, backbone.stage1.1.blocks.2.conv1.bn.bias, backbone.stage1.1.blocks.2.conv1.bn.running_mean, backbone.stage1.1.blocks.2.conv1.bn.running_var, backbone.stage1.1.blocks.2.conv2.conv.weight, backbone.stage1.1.blocks.2.conv2.bn.weight, backbone.stage1.1.blocks.2.conv2.bn.bias, backbone.stage1.1.blocks.2.conv2.bn.running_mean, backbone.stage1.1.blocks.2.conv2.bn.running_var, backbone.stage1.1.blocks.3.conv1.conv.weight, backbone.stage1.1.blocks.3.conv1.bn.weight, backbone.stage1.1.blocks.3.conv1.bn.bias, backbone.stage1.1.blocks.3.conv1.bn.running_mean, backbone.stage1.1.blocks.3.conv1.bn.running_var, backbone.stage1.1.blocks.3.conv2.conv.weight, backbone.stage1.1.blocks.3.conv2.bn.weight, backbone.stage1.1.blocks.3.conv2.bn.bias, backbone.stage1.1.blocks.3.conv2.bn.running_mean, backbone.stage1.1.blocks.3.conv2.bn.running_var, backbone.stage2.0.conv.weight, backbone.stage2.0.bn.weight, backbone.stage2.0.bn.bias, backbone.stage2.0.bn.running_mean, backbone.stage2.0.bn.running_var, backbone.stage2.1.main_conv.conv.weight, backbone.stage2.1.main_conv.bn.weight, backbone.stage2.1.main_conv.bn.bias, backbone.stage2.1.main_conv.bn.running_mean, backbone.stage2.1.main_conv.bn.running_var, backbone.stage2.1.short_conv.conv.weight, backbone.stage2.1.short_conv.bn.weight, backbone.stage2.1.short_conv.bn.bias, backbone.stage2.1.short_conv.bn.running_mean, backbone.stage2.1.short_conv.bn.running_var, backbone.stage2.1.final_conv.conv.weight, backbone.stage2.1.final_conv.bn.weight, backbone.stage2.1.final_conv.bn.bias, backbone.stage2.1.final_conv.bn.running_mean, backbone.stage2.1.final_conv.bn.running_var, backbone.stage2.1.blocks.0.conv1.conv.weight, backbone.stage2.1.blocks.0.conv1.bn.weight, backbone.stage2.1.blocks.0.conv1.bn.bias, backbone.stage2.1.blocks.0.conv1.bn.running_mean, backbone.stage2.1.blocks.0.conv1.bn.running_var, backbone.stage2.1.blocks.0.conv2.conv.weight, backbone.stage2.1.blocks.0.conv2.bn.weight, backbone.stage2.1.blocks.0.conv2.bn.bias, backbone.stage2.1.blocks.0.conv2.bn.running_mean, backbone.stage2.1.blocks.0.conv2.bn.running_var, backbone.stage2.1.blocks.1.conv1.conv.weight, backbone.stage2.1.blocks.1.conv1.bn.weight, backbone.stage2.1.blocks.1.conv1.bn.bias, backbone.stage2.1.blocks.1.conv1.bn.running_mean, backbone.stage2.1.blocks.1.conv1.bn.running_var, backbone.stage2.1.blocks.1.conv2.conv.weight, backbone.stage2.1.blocks.1.conv2.bn.weight, backbone.stage2.1.blocks.1.conv2.bn.bias, backbone.stage2.1.blocks.1.conv2.bn.running_mean, backbone.stage2.1.blocks.1.conv2.bn.running_var, backbone.stage2.1.blocks.2.conv1.conv.weight, backbone.stage2.1.blocks.2.conv1.bn.weight, backbone.stage2.1.blocks.2.conv1.bn.bias, backbone.stage2.1.blocks.2.conv1.bn.running_mean, backbone.stage2.1.blocks.2.conv1.bn.running_var, backbone.stage2.1.blocks.2.conv2.conv.weight, backbone.stage2.1.blocks.2.conv2.bn.weight, backbone.stage2.1.blocks.2.conv2.bn.bias, backbone.stage2.1.blocks.2.conv2.bn.running_mean, backbone.stage2.1.blocks.2.conv2.bn.running_var, backbone.stage2.1.blocks.3.conv1.conv.weight, backbone.stage2.1.blocks.3.conv1.bn.weight, backbone.stage2.1.blocks.3.conv1.bn.bias, backbone.stage2.1.blocks.3.conv1.bn.running_mean, backbone.stage2.1.blocks.3.conv1.bn.running_var, backbone.stage2.1.blocks.3.conv2.conv.weight, backbone.stage2.1.blocks.3.conv2.bn.weight, backbone.stage2.1.blocks.3.conv2.bn.bias, backbone.stage2.1.blocks.3.conv2.bn.running_mean, backbone.stage2.1.blocks.3.conv2.bn.running_var, backbone.stage2.1.blocks.4.conv1.conv.weight, backbone.stage2.1.blocks.4.conv1.bn.weight, backbone.stage2.1.blocks.4.conv1.bn.bias, backbone.stage2.1.blocks.4.conv1.bn.running_mean, backbone.stage2.1.blocks.4.conv1.bn.running_var, backbone.stage2.1.blocks.4.conv2.conv.weight, backbone.stage2.1.blocks.4.conv2.bn.weight, backbone.stage2.1.blocks.4.conv2.bn.bias, backbone.stage2.1.blocks.4.conv2.bn.running_mean, backbone.stage2.1.blocks.4.conv2.bn.running_var, backbone.stage2.1.blocks.5.conv1.conv.weight, backbone.stage2.1.blocks.5.conv1.bn.weight, backbone.stage2.1.blocks.5.conv1.bn.bias, backbone.stage2.1.blocks.5.conv1.bn.running_mean, backbone.stage2.1.blocks.5.conv1.bn.running_var, backbone.stage2.1.blocks.5.conv2.conv.weight, backbone.stage2.1.blocks.5.conv2.bn.weight, backbone.stage2.1.blocks.5.conv2.bn.bias, backbone.stage2.1.blocks.5.conv2.bn.running_mean, backbone.stage2.1.blocks.5.conv2.bn.running_var, backbone.stage2.1.blocks.6.conv1.conv.weight, backbone.stage2.1.blocks.6.conv1.bn.weight, backbone.stage2.1.blocks.6.conv1.bn.bias, backbone.stage2.1.blocks.6.conv1.bn.running_mean, backbone.stage2.1.blocks.6.conv1.bn.running_var, backbone.stage2.1.blocks.6.conv2.conv.weight, backbone.stage2.1.blocks.6.conv2.bn.weight, backbone.stage2.1.blocks.6.conv2.bn.bias, backbone.stage2.1.blocks.6.conv2.bn.running_mean, backbone.stage2.1.blocks.6.conv2.bn.running_var, backbone.stage2.1.blocks.7.conv1.conv.weight, backbone.stage2.1.blocks.7.conv1.bn.weight, backbone.stage2.1.blocks.7.conv1.bn.bias, backbone.stage2.1.blocks.7.conv1.bn.running_mean, backbone.stage2.1.blocks.7.conv1.bn.running_var, backbone.stage2.1.blocks.7.conv2.conv.weight, backbone.stage2.1.blocks.7.conv2.bn.weight, backbone.stage2.1.blocks.7.conv2.bn.bias, backbone.stage2.1.blocks.7.conv2.bn.running_mean, backbone.stage2.1.blocks.7.conv2.bn.running_var, backbone.stage2.1.blocks.8.conv1.conv.weight, backbone.stage2.1.blocks.8.conv1.bn.weight, backbone.stage2.1.blocks.8.conv1.bn.bias, backbone.stage2.1.blocks.8.conv1.bn.running_mean, backbone.stage2.1.blocks.8.conv1.bn.running_var, backbone.stage2.1.blocks.8.conv2.conv.weight, backbone.stage2.1.blocks.8.conv2.bn.weight, backbone.stage2.1.blocks.8.conv2.bn.bias, backbone.stage2.1.blocks.8.conv2.bn.running_mean, backbone.stage2.1.blocks.8.conv2.bn.running_var, backbone.stage2.1.blocks.9.conv1.conv.weight, backbone.stage2.1.blocks.9.conv1.bn.weight, backbone.stage2.1.blocks.9.conv1.bn.bias, backbone.stage2.1.blocks.9.conv1.bn.running_mean, backbone.stage2.1.blocks.9.conv1.bn.running_var, backbone.stage2.1.blocks.9.conv2.conv.weight, backbone.stage2.1.blocks.9.conv2.bn.weight, backbone.stage2.1.blocks.9.conv2.bn.bias, backbone.stage2.1.blocks.9.conv2.bn.running_mean, backbone.stage2.1.blocks.9.conv2.bn.running_var, backbone.stage2.1.blocks.10.conv1.conv.weight, backbone.stage2.1.blocks.10.conv1.bn.weight, backbone.stage2.1.blocks.10.conv1.bn.bias, backbone.stage2.1.blocks.10.conv1.bn.running_mean, backbone.stage2.1.blocks.10.conv1.bn.running_var, backbone.stage2.1.blocks.10.conv2.conv.weight, backbone.stage2.1.blocks.10.conv2.bn.weight, backbone.stage2.1.blocks.10.conv2.bn.bias, backbone.stage2.1.blocks.10.conv2.bn.running_mean, backbone.stage2.1.blocks.10.conv2.bn.running_var, backbone.stage2.1.blocks.11.conv1.conv.weight, backbone.stage2.1.blocks.11.conv1.bn.weight, backbone.stage2.1.blocks.11.conv1.bn.bias, backbone.stage2.1.blocks.11.conv1.bn.running_mean, backbone.stage2.1.blocks.11.conv1.bn.running_var, backbone.stage2.1.blocks.11.conv2.conv.weight, backbone.stage2.1.blocks.11.conv2.bn.weight, backbone.stage2.1.blocks.11.conv2.bn.bias, backbone.stage2.1.blocks.11.conv2.bn.running_mean, backbone.stage2.1.blocks.11.conv2.bn.running_var, backbone.stage3.0.conv.weight, backbone.stage3.0.bn.weight, backbone.stage3.0.bn.bias, backbone.stage3.0.bn.running_mean, backbone.stage3.0.bn.running_var, backbone.stage3.1.main_conv.conv.weight, backbone.stage3.1.main_conv.bn.weight, backbone.stage3.1.main_conv.bn.bias, backbone.stage3.1.main_conv.bn.running_mean, backbone.stage3.1.main_conv.bn.running_var, backbone.stage3.1.short_conv.conv.weight, backbone.stage3.1.short_conv.bn.weight, backbone.stage3.1.short_conv.bn.bias, backbone.stage3.1.short_conv.bn.running_mean, backbone.stage3.1.short_conv.bn.running_var, backbone.stage3.1.final_conv.conv.weight, backbone.stage3.1.final_conv.bn.weight, backbone.stage3.1.final_conv.bn.bias, backbone.stage3.1.final_conv.bn.running_mean, backbone.stage3.1.final_conv.bn.running_var, backbone.stage3.1.blocks.0.conv1.conv.weight, backbone.stage3.1.blocks.0.conv1.bn.weight, backbone.stage3.1.blocks.0.conv1.bn.bias, backbone.stage3.1.blocks.0.conv1.bn.running_mean, backbone.stage3.1.blocks.0.conv1.bn.running_var, backbone.stage3.1.blocks.0.conv2.conv.weight, backbone.stage3.1.blocks.0.conv2.bn.weight, backbone.stage3.1.blocks.0.conv2.bn.bias, backbone.stage3.1.blocks.0.conv2.bn.running_mean, backbone.stage3.1.blocks.0.conv2.bn.running_var, backbone.stage3.1.blocks.1.conv1.conv.weight, backbone.stage3.1.blocks.1.conv1.bn.weight, backbone.stage3.1.blocks.1.conv1.bn.bias, backbone.stage3.1.blocks.1.conv1.bn.running_mean, backbone.stage3.1.blocks.1.conv1.bn.running_var, backbone.stage3.1.blocks.1.conv2.conv.weight, backbone.stage3.1.blocks.1.conv2.bn.weight, backbone.stage3.1.blocks.1.conv2.bn.bias, backbone.stage3.1.blocks.1.conv2.bn.running_mean, backbone.stage3.1.blocks.1.conv2.bn.running_var, backbone.stage3.1.blocks.2.conv1.conv.weight, backbone.stage3.1.blocks.2.conv1.bn.weight, backbone.stage3.1.blocks.2.conv1.bn.bias, backbone.stage3.1.blocks.2.conv1.bn.running_mean, backbone.stage3.1.blocks.2.conv1.bn.running_var, backbone.stage3.1.blocks.2.conv2.conv.weight, backbone.stage3.1.blocks.2.conv2.bn.weight, backbone.stage3.1.blocks.2.conv2.bn.bias, backbone.stage3.1.blocks.2.conv2.bn.running_mean, backbone.stage3.1.blocks.2.conv2.bn.running_var, backbone.stage3.1.blocks.3.conv1.conv.weight, backbone.stage3.1.blocks.3.conv1.bn.weight, backbone.stage3.1.blocks.3.conv1.bn.bias, backbone.stage3.1.blocks.3.conv1.bn.running_mean, backbone.stage3.1.blocks.3.conv1.bn.running_var, backbone.stage3.1.blocks.3.conv2.conv.weight, backbone.stage3.1.blocks.3.conv2.bn.weight, backbone.stage3.1.blocks.3.conv2.bn.bias, backbone.stage3.1.blocks.3.conv2.bn.running_mean, backbone.stage3.1.blocks.3.conv2.bn.running_var, backbone.stage3.1.blocks.4.conv1.conv.weight, backbone.stage3.1.blocks.4.conv1.bn.weight, backbone.stage3.1.blocks.4.conv1.bn.bias, backbone.stage3.1.blocks.4.conv1.bn.running_mean, backbone.stage3.1.blocks.4.conv1.bn.running_var, backbone.stage3.1.blocks.4.conv2.conv.weight, backbone.stage3.1.blocks.4.conv2.bn.weight, backbone.stage3.1.blocks.4.conv2.bn.bias, backbone.stage3.1.blocks.4.conv2.bn.running_mean, backbone.stage3.1.blocks.4.conv2.bn.running_var, backbone.stage3.1.blocks.5.conv1.conv.weight, backbone.stage3.1.blocks.5.conv1.bn.weight, backbone.stage3.1.blocks.5.conv1.bn.bias, backbone.stage3.1.blocks.5.conv1.bn.running_mean, backbone.stage3.1.blocks.5.conv1.bn.running_var, backbone.stage3.1.blocks.5.conv2.conv.weight, backbone.stage3.1.blocks.5.conv2.bn.weight, backbone.stage3.1.blocks.5.conv2.bn.bias, backbone.stage3.1.blocks.5.conv2.bn.running_mean, backbone.stage3.1.blocks.5.conv2.bn.running_var, backbone.stage3.1.blocks.6.conv1.conv.weight, backbone.stage3.1.blocks.6.conv1.bn.weight, backbone.stage3.1.blocks.6.conv1.bn.bias, backbone.stage3.1.blocks.6.conv1.bn.running_mean, backbone.stage3.1.blocks.6.conv1.bn.running_var, backbone.stage3.1.blocks.6.conv2.conv.weight, backbone.stage3.1.blocks.6.conv2.bn.weight, backbone.stage3.1.blocks.6.conv2.bn.bias, backbone.stage3.1.blocks.6.conv2.bn.running_mean, backbone.stage3.1.blocks.6.conv2.bn.running_var, backbone.stage3.1.blocks.7.conv1.conv.weight, backbone.stage3.1.blocks.7.conv1.bn.weight, backbone.stage3.1.blocks.7.conv1.bn.bias, backbone.stage3.1.blocks.7.conv1.bn.running_mean, backbone.stage3.1.blocks.7.conv1.bn.running_var, backbone.stage3.1.blocks.7.conv2.conv.weight, backbone.stage3.1.blocks.7.conv2.bn.weight, backbone.stage3.1.blocks.7.conv2.bn.bias, backbone.stage3.1.blocks.7.conv2.bn.running_mean, backbone.stage3.1.blocks.7.conv2.bn.running_var, backbone.stage3.1.blocks.8.conv1.conv.weight, backbone.stage3.1.blocks.8.conv1.bn.weight, backbone.stage3.1.blocks.8.conv1.bn.bias, backbone.stage3.1.blocks.8.conv1.bn.running_mean, backbone.stage3.1.blocks.8.conv1.bn.running_var, backbone.stage3.1.blocks.8.conv2.conv.weight, backbone.stage3.1.blocks.8.conv2.bn.weight, backbone.stage3.1.blocks.8.conv2.bn.bias, backbone.stage3.1.blocks.8.conv2.bn.running_mean, backbone.stage3.1.blocks.8.conv2.bn.running_var, backbone.stage3.1.blocks.9.conv1.conv.weight, backbone.stage3.1.blocks.9.conv1.bn.weight, backbone.stage3.1.blocks.9.conv1.bn.bias, backbone.stage3.1.blocks.9.conv1.bn.running_mean, backbone.stage3.1.blocks.9.conv1.bn.running_var, backbone.stage3.1.blocks.9.conv2.conv.weight, backbone.stage3.1.blocks.9.conv2.bn.weight, backbone.stage3.1.blocks.9.conv2.bn.bias, backbone.stage3.1.blocks.9.conv2.bn.running_mean, backbone.stage3.1.blocks.9.conv2.bn.running_var, backbone.stage3.1.blocks.10.conv1.conv.weight, backbone.stage3.1.blocks.10.conv1.bn.weight, backbone.stage3.1.blocks.10.conv1.bn.bias, backbone.stage3.1.blocks.10.conv1.bn.running_mean, backbone.stage3.1.blocks.10.conv1.bn.running_var, backbone.stage3.1.blocks.10.conv2.conv.weight, backbone.stage3.1.blocks.10.conv2.bn.weight, backbone.stage3.1.blocks.10.conv2.bn.bias, backbone.stage3.1.blocks.10.conv2.bn.running_mean, backbone.stage3.1.blocks.10.conv2.bn.running_var, backbone.stage3.1.blocks.11.conv1.conv.weight, backbone.stage3.1.blocks.11.conv1.bn.weight, backbone.stage3.1.blocks.11.conv1.bn.bias, backbone.stage3.1.blocks.11.conv1.bn.running_mean, backbone.stage3.1.blocks.11.conv1.bn.running_var, backbone.stage3.1.blocks.11.conv2.conv.weight, backbone.stage3.1.blocks.11.conv2.bn.weight, backbone.stage3.1.blocks.11.conv2.bn.bias, backbone.stage3.1.blocks.11.conv2.bn.running_mean, backbone.stage3.1.blocks.11.conv2.bn.running_var, backbone.stage4.0.conv.weight, backbone.stage4.0.bn.weight, backbone.stage4.0.bn.bias, backbone.stage4.0.bn.running_mean, backbone.stage4.0.bn.running_var, backbone.stage4.1.conv1.conv.weight, backbone.stage4.1.conv1.bn.weight, backbone.stage4.1.conv1.bn.bias, backbone.stage4.1.conv1.bn.running_mean, backbone.stage4.1.conv1.bn.running_var, backbone.stage4.1.conv2.conv.weight, backbone.stage4.1.conv2.bn.weight, backbone.stage4.1.conv2.bn.bias, backbone.stage4.1.conv2.bn.running_mean, backbone.stage4.1.conv2.bn.running_var, backbone.stage4.2.main_conv.conv.weight, backbone.stage4.2.main_conv.bn.weight, backbone.stage4.2.main_conv.bn.bias, backbone.stage4.2.main_conv.bn.running_mean, backbone.stage4.2.main_conv.bn.running_var, backbone.stage4.2.short_conv.conv.weight, backbone.stage4.2.short_conv.bn.weight, backbone.stage4.2.short_conv.bn.bias, backbone.stage4.2.short_conv.bn.running_mean, backbone.stage4.2.short_conv.bn.running_var, backbone.stage4.2.final_conv.conv.weight, backbone.stage4.2.final_conv.bn.weight, backbone.stage4.2.final_conv.bn.bias, backbone.stage4.2.final_conv.bn.running_mean, backbone.stage4.2.final_conv.bn.running_var, backbone.stage4.2.blocks.0.conv1.conv.weight, backbone.stage4.2.blocks.0.conv1.bn.weight, backbone.stage4.2.blocks.0.conv1.bn.bias, backbone.stage4.2.blocks.0.conv1.bn.running_mean, backbone.stage4.2.blocks.0.conv1.bn.running_var, backbone.stage4.2.blocks.0.conv2.conv.weight, backbone.stage4.2.blocks.0.conv2.bn.weight, backbone.stage4.2.blocks.0.conv2.bn.bias, backbone.stage4.2.blocks.0.conv2.bn.running_mean, backbone.stage4.2.blocks.0.conv2.bn.running_var, backbone.stage4.2.blocks.1.conv1.conv.weight, backbone.stage4.2.blocks.1.conv1.bn.weight, backbone.stage4.2.blocks.1.conv1.bn.bias, backbone.stage4.2.blocks.1.conv1.bn.running_mean, backbone.stage4.2.blocks.1.conv1.bn.running_var, backbone.stage4.2.blocks.1.conv2.conv.weight, backbone.stage4.2.blocks.1.conv2.bn.weight, backbone.stage4.2.blocks.1.conv2.bn.bias, backbone.stage4.2.blocks.1.conv2.bn.running_mean, backbone.stage4.2.blocks.1.conv2.bn.running_var, backbone.stage4.2.blocks.2.conv1.conv.weight, backbone.stage4.2.blocks.2.conv1.bn.weight, backbone.stage4.2.blocks.2.conv1.bn.bias, backbone.stage4.2.blocks.2.conv1.bn.running_mean, backbone.stage4.2.blocks.2.conv1.bn.running_var, backbone.stage4.2.blocks.2.conv2.conv.weight, backbone.stage4.2.blocks.2.conv2.bn.weight, backbone.stage4.2.blocks.2.conv2.bn.bias, backbone.stage4.2.blocks.2.conv2.bn.running_mean, backbone.stage4.2.blocks.2.conv2.bn.running_var, backbone.stage4.2.blocks.3.conv1.conv.weight, backbone.stage4.2.blocks.3.conv1.bn.weight, backbone.stage4.2.blocks.3.conv1.bn.bias, backbone.stage4.2.blocks.3.conv1.bn.running_mean, backbone.stage4.2.blocks.3.conv1.bn.running_var, backbone.stage4.2.blocks.3.conv2.conv.weight, backbone.stage4.2.blocks.3.conv2.bn.weight, backbone.stage4.2.blocks.3.conv2.bn.bias, backbone.stage4.2.blocks.3.conv2.bn.running_mean, backbone.stage4.2.blocks.3.conv2.bn.running_var, neck.reduce_layers.0.conv.weight, neck.reduce_layers.0.bn.weight, neck.reduce_layers.0.bn.bias, neck.reduce_layers.0.bn.running_mean, neck.reduce_layers.0.bn.running_var, neck.reduce_layers.1.conv.weight, neck.reduce_layers.1.bn.weight, neck.reduce_layers.1.bn.bias, neck.reduce_layers.1.bn.running_mean, neck.reduce_layers.1.bn.running_var, neck.top_down_blocks.0.main_conv.conv.weight, neck.top_down_blocks.0.main_conv.bn.weight, neck.top_down_blocks.0.main_conv.bn.bias, neck.top_down_blocks.0.main_conv.bn.running_mean, neck.top_down_blocks.0.main_conv.bn.running_var, neck.top_down_blocks.0.short_conv.conv.weight, neck.top_down_blocks.0.short_conv.bn.weight, neck.top_down_blocks.0.short_conv.bn.bias, neck.top_down_blocks.0.short_conv.bn.running_mean, neck.top_down_blocks.0.short_conv.bn.running_var, neck.top_down_blocks.0.final_conv.conv.weight, neck.top_down_blocks.0.final_conv.bn.weight, neck.top_down_blocks.0.final_conv.bn.bias, neck.top_down_blocks.0.final_conv.bn.running_mean, neck.top_down_blocks.0.final_conv.bn.running_var, neck.top_down_blocks.0.blocks.0.conv1.conv.weight, neck.top_down_blocks.0.blocks.0.conv1.bn.weight, neck.top_down_blocks.0.blocks.0.conv1.bn.bias, neck.top_down_blocks.0.blocks.0.conv1.bn.running_mean, neck.top_down_blocks.0.blocks.0.conv1.bn.running_var, neck.top_down_blocks.0.blocks.0.conv2.conv.weight, neck.top_down_blocks.0.blocks.0.conv2.bn.weight, neck.top_down_blocks.0.blocks.0.conv2.bn.bias, neck.top_down_blocks.0.blocks.0.conv2.bn.running_mean, neck.top_down_blocks.0.blocks.0.conv2.bn.running_var, neck.top_down_blocks.0.blocks.1.conv1.conv.weight, neck.top_down_blocks.0.blocks.1.conv1.bn.weight, neck.top_down_blocks.0.blocks.1.conv1.bn.bias, neck.top_down_blocks.0.blocks.1.conv1.bn.running_mean, neck.top_down_blocks.0.blocks.1.conv1.bn.running_var, neck.top_down_blocks.0.blocks.1.conv2.conv.weight, neck.top_down_blocks.0.blocks.1.conv2.bn.weight, neck.top_down_blocks.0.blocks.1.conv2.bn.bias, neck.top_down_blocks.0.blocks.1.conv2.bn.running_mean, neck.top_down_blocks.0.blocks.1.conv2.bn.running_var, neck.top_down_blocks.0.blocks.2.conv1.conv.weight, neck.top_down_blocks.0.blocks.2.conv1.bn.weight, neck.top_down_blocks.0.blocks.2.conv1.bn.bias, neck.top_down_blocks.0.blocks.2.conv1.bn.running_mean, neck.top_down_blocks.0.blocks.2.conv1.bn.running_var, neck.top_down_blocks.0.blocks.2.conv2.conv.weight, neck.top_down_blocks.0.blocks.2.conv2.bn.weight, neck.top_down_blocks.0.blocks.2.conv2.bn.bias, neck.top_down_blocks.0.blocks.2.conv2.bn.running_mean, neck.top_down_blocks.0.blocks.2.conv2.bn.running_var, neck.top_down_blocks.0.blocks.3.conv1.conv.weight, neck.top_down_blocks.0.blocks.3.conv1.bn.weight, neck.top_down_blocks.0.blocks.3.conv1.bn.bias, neck.top_down_blocks.0.blocks.3.conv1.bn.running_mean, neck.top_down_blocks.0.blocks.3.conv1.bn.running_var, neck.top_down_blocks.0.blocks.3.conv2.conv.weight, neck.top_down_blocks.0.blocks.3.conv2.bn.weight, neck.top_down_blocks.0.blocks.3.conv2.bn.bias, neck.top_down_blocks.0.blocks.3.conv2.bn.running_mean, neck.top_down_blocks.0.blocks.3.conv2.bn.running_var, neck.top_down_blocks.1.main_conv.conv.weight, neck.top_down_blocks.1.main_conv.bn.weight, neck.top_down_blocks.1.main_conv.bn.bias, neck.top_down_blocks.1.main_conv.bn.running_mean, neck.top_down_blocks.1.main_conv.bn.running_var, neck.top_down_blocks.1.short_conv.conv.weight, neck.top_down_blocks.1.short_conv.bn.weight, neck.top_down_blocks.1.short_conv.bn.bias, neck.top_down_blocks.1.short_conv.bn.running_mean, neck.top_down_blocks.1.short_conv.bn.running_var, neck.top_down_blocks.1.final_conv.conv.weight, neck.top_down_blocks.1.final_conv.bn.weight, neck.top_down_blocks.1.final_conv.bn.bias, neck.top_down_blocks.1.final_conv.bn.running_mean, neck.top_down_blocks.1.final_conv.bn.running_var, neck.top_down_blocks.1.blocks.0.conv1.conv.weight, neck.top_down_blocks.1.blocks.0.conv1.bn.weight, neck.top_down_blocks.1.blocks.0.conv1.bn.bias, neck.top_down_blocks.1.blocks.0.conv1.bn.running_mean, neck.top_down_blocks.1.blocks.0.conv1.bn.running_var, neck.top_down_blocks.1.blocks.0.conv2.conv.weight, neck.top_down_blocks.1.blocks.0.conv2.bn.weight, neck.top_down_blocks.1.blocks.0.conv2.bn.bias, neck.top_down_blocks.1.blocks.0.conv2.bn.running_mean, neck.top_down_blocks.1.blocks.0.conv2.bn.running_var, neck.top_down_blocks.1.blocks.1.conv1.conv.weight, neck.top_down_blocks.1.blocks.1.conv1.bn.weight, neck.top_down_blocks.1.blocks.1.conv1.bn.bias, neck.top_down_blocks.1.blocks.1.conv1.bn.running_mean, neck.top_down_blocks.1.blocks.1.conv1.bn.running_var, neck.top_down_blocks.1.blocks.1.conv2.conv.weight, neck.top_down_blocks.1.blocks.1.conv2.bn.weight, neck.top_down_blocks.1.blocks.1.conv2.bn.bias, neck.top_down_blocks.1.blocks.1.conv2.bn.running_mean, neck.top_down_blocks.1.blocks.1.conv2.bn.running_var, neck.top_down_blocks.1.blocks.2.conv1.conv.weight, neck.top_down_blocks.1.blocks.2.conv1.bn.weight, neck.top_down_blocks.1.blocks.2.conv1.bn.bias, neck.top_down_blocks.1.blocks.2.conv1.bn.running_mean, neck.top_down_blocks.1.blocks.2.conv1.bn.running_var, neck.top_down_blocks.1.blocks.2.conv2.conv.weight, neck.top_down_blocks.1.blocks.2.conv2.bn.weight, neck.top_down_blocks.1.blocks.2.conv2.bn.bias, neck.top_down_blocks.1.blocks.2.conv2.bn.running_mean, neck.top_down_blocks.1.blocks.2.conv2.bn.running_var, neck.top_down_blocks.1.blocks.3.conv1.conv.weight, neck.top_down_blocks.1.blocks.3.conv1.bn.weight, neck.top_down_blocks.1.blocks.3.conv1.bn.bias, neck.top_down_blocks.1.blocks.3.conv1.bn.running_mean, neck.top_down_blocks.1.blocks.3.conv1.bn.running_var, neck.top_down_blocks.1.blocks.3.conv2.conv.weight, neck.top_down_blocks.1.blocks.3.conv2.bn.weight, neck.top_down_blocks.1.blocks.3.conv2.bn.bias, neck.top_down_blocks.1.blocks.3.conv2.bn.running_mean, neck.top_down_blocks.1.blocks.3.conv2.bn.running_var, neck.downsamples.0.conv.weight, neck.downsamples.0.bn.weight, neck.downsamples.0.bn.bias, neck.downsamples.0.bn.running_mean, neck.downsamples.0.bn.running_var, neck.downsamples.1.conv.weight, neck.downsamples.1.bn.weight, neck.downsamples.1.bn.bias, neck.downsamples.1.bn.running_mean, neck.downsamples.1.bn.running_var, neck.bottom_up_blocks.0.main_conv.conv.weight, neck.bottom_up_blocks.0.main_conv.bn.weight, neck.bottom_up_blocks.0.main_conv.bn.bias, neck.bottom_up_blocks.0.main_conv.bn.running_mean, neck.bottom_up_blocks.0.main_conv.bn.running_var, neck.bottom_up_blocks.0.short_conv.conv.weight, neck.bottom_up_blocks.0.short_conv.bn.weight, neck.bottom_up_blocks.0.short_conv.bn.bias, neck.bottom_up_blocks.0.short_conv.bn.running_mean, neck.bottom_up_blocks.0.short_conv.bn.running_var, neck.bottom_up_blocks.0.final_conv.conv.weight, neck.bottom_up_blocks.0.final_conv.bn.weight, neck.bottom_up_blocks.0.final_conv.bn.bias, neck.bottom_up_blocks.0.final_conv.bn.running_mean, neck.bottom_up_blocks.0.final_conv.bn.running_var, neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight, neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight, neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias, neck.bottom_up_blocks.0.blocks.0.conv1.bn.running_mean, neck.bottom_up_blocks.0.blocks.0.conv1.bn.running_var, neck.bottom_up_blocks.0.blocks.0.conv2.conv.weight, neck.bottom_up_blocks.0.blocks.0.conv2.bn.weight, neck.bottom_up_blocks.0.blocks.0.conv2.bn.bias, neck.bottom_up_blocks.0.blocks.0.conv2.bn.running_mean, neck.bottom_up_blocks.0.blocks.0.conv2.bn.running_var, neck.bottom_up_blocks.0.blocks.1.conv1.conv.weight, neck.bottom_up_blocks.0.blocks.1.conv1.bn.weight, neck.bottom_up_blocks.0.blocks.1.conv1.bn.bias, neck.bottom_up_blocks.0.blocks.1.conv1.bn.running_mean, neck.bottom_up_blocks.0.blocks.1.conv1.bn.running_var, neck.bottom_up_blocks.0.blocks.1.conv2.conv.weight, neck.bottom_up_blocks.0.blocks.1.conv2.bn.weight, neck.bottom_up_blocks.0.blocks.1.conv2.bn.bias, neck.bottom_up_blocks.0.blocks.1.conv2.bn.running_mean, neck.bottom_up_blocks.0.blocks.1.conv2.bn.running_var, neck.bottom_up_blocks.0.blocks.2.conv1.conv.weight, neck.bottom_up_blocks.0.blocks.2.conv1.bn.weight, neck.bottom_up_blocks.0.blocks.2.conv1.bn.bias, neck.bottom_up_blocks.0.blocks.2.conv1.bn.running_mean, neck.bottom_up_blocks.0.blocks.2.conv1.bn.running_var, neck.bottom_up_blocks.0.blocks.2.conv2.conv.weight, neck.bottom_up_blocks.0.blocks.2.conv2.bn.weight, neck.bottom_up_blocks.0.blocks.2.conv2.bn.bias, neck.bottom_up_blocks.0.blocks.2.conv2.bn.running_mean, neck.bottom_up_blocks.0.blocks.2.conv2.bn.running_var, neck.bottom_up_blocks.0.blocks.3.conv1.conv.weight, neck.bottom_up_blocks.0.blocks.3.conv1.bn.weight, neck.bottom_up_blocks.0.blocks.3.conv1.bn.bias, neck.bottom_up_blocks.0.blocks.3.conv1.bn.running_mean, neck.bottom_up_blocks.0.blocks.3.conv1.bn.running_var, neck.bottom_up_blocks.0.blocks.3.conv2.conv.weight, neck.bottom_up_blocks.0.blocks.3.conv2.bn.weight, neck.bottom_up_blocks.0.blocks.3.conv2.bn.bias, neck.bottom_up_blocks.0.blocks.3.conv2.bn.running_mean, neck.bottom_up_blocks.0.blocks.3.conv2.bn.running_var, neck.bottom_up_blocks.1.main_conv.conv.weight, neck.bottom_up_blocks.1.main_conv.bn.weight, neck.bottom_up_blocks.1.main_conv.bn.bias, neck.bottom_up_blocks.1.main_conv.bn.running_mean, neck.bottom_up_blocks.1.main_conv.bn.running_var, neck.bottom_up_blocks.1.short_conv.conv.weight, neck.bottom_up_blocks.1.short_conv.bn.weight, neck.bottom_up_blocks.1.short_conv.bn.bias, neck.bottom_up_blocks.1.short_conv.bn.running_mean, neck.bottom_up_blocks.1.short_conv.bn.running_var, neck.bottom_up_blocks.1.final_conv.conv.weight, neck.bottom_up_blocks.1.final_conv.bn.weight, neck.bottom_up_blocks.1.final_conv.bn.bias, neck.bottom_up_blocks.1.final_conv.bn.running_mean, neck.bottom_up_blocks.1.final_conv.bn.running_var, neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight, neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight, neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias, neck.bottom_up_blocks.1.blocks.0.conv1.bn.running_mean, neck.bottom_up_blocks.1.blocks.0.conv1.bn.running_var, neck.bottom_up_blocks.1.blocks.0.conv2.conv.weight, neck.bottom_up_blocks.1.blocks.0.conv2.bn.weight, neck.bottom_up_blocks.1.blocks.0.conv2.bn.bias, neck.bottom_up_blocks.1.blocks.0.conv2.bn.running_mean, neck.bottom_up_blocks.1.blocks.0.conv2.bn.running_var, neck.bottom_up_blocks.1.blocks.1.conv1.conv.weight, neck.bottom_up_blocks.1.blocks.1.conv1.bn.weight, neck.bottom_up_blocks.1.blocks.1.conv1.bn.bias, neck.bottom_up_blocks.1.blocks.1.conv1.bn.running_mean, neck.bottom_up_blocks.1.blocks.1.conv1.bn.running_var, neck.bottom_up_blocks.1.blocks.1.conv2.conv.weight, neck.bottom_up_blocks.1.blocks.1.conv2.bn.weight, neck.bottom_up_blocks.1.blocks.1.conv2.bn.bias, neck.bottom_up_blocks.1.blocks.1.conv2.bn.running_mean, neck.bottom_up_blocks.1.blocks.1.conv2.bn.running_var, neck.bottom_up_blocks.1.blocks.2.conv1.conv.weight, neck.bottom_up_blocks.1.blocks.2.conv1.bn.weight, neck.bottom_up_blocks.1.blocks.2.conv1.bn.bias, neck.bottom_up_blocks.1.blocks.2.conv1.bn.running_mean, neck.bottom_up_blocks.1.blocks.2.conv1.bn.running_var, neck.bottom_up_blocks.1.blocks.2.conv2.conv.weight, neck.bottom_up_blocks.1.blocks.2.conv2.bn.weight, neck.bottom_up_blocks.1.blocks.2.conv2.bn.bias, neck.bottom_up_blocks.1.blocks.2.conv2.bn.running_mean, neck.bottom_up_blocks.1.blocks.2.conv2.bn.running_var, neck.bottom_up_blocks.1.blocks.3.conv1.conv.weight, neck.bottom_up_blocks.1.blocks.3.conv1.bn.weight, neck.bottom_up_blocks.1.blocks.3.conv1.bn.bias, neck.bottom_up_blocks.1.blocks.3.conv1.bn.running_mean, neck.bottom_up_blocks.1.blocks.3.conv1.bn.running_var, neck.bottom_up_blocks.1.blocks.3.conv2.conv.weight, neck.bottom_up_blocks.1.blocks.3.conv2.bn.weight, neck.bottom_up_blocks.1.blocks.3.conv2.bn.bias, neck.bottom_up_blocks.1.blocks.3.conv2.bn.running_mean, neck.bottom_up_blocks.1.blocks.3.conv2.bn.running_var, neck.out_convs.0.conv.weight, neck.out_convs.0.bn.weight, neck.out_convs.0.bn.bias, neck.out_convs.0.bn.running_mean, neck.out_convs.0.bn.running_var, neck.out_convs.1.conv.weight, neck.out_convs.1.bn.weight, neck.out_convs.1.bn.bias, neck.out_convs.1.bn.running_mean, neck.out_convs.1.bn.running_var, neck.out_convs.2.conv.weight, neck.out_convs.2.bn.weight, neck.out_convs.2.bn.bias, neck.out_convs.2.bn.running_mean, neck.out_convs.2.bn.running_var, bbox_head.multi_level_cls_convs.0.0.conv.weight, bbox_head.multi_level_cls_convs.0.0.bn.weight, bbox_head.multi_level_cls_convs.0.0.bn.bias, bbox_head.multi_level_cls_convs.0.0.bn.running_mean, bbox_head.multi_level_cls_convs.0.0.bn.running_var, bbox_head.multi_level_cls_convs.0.1.conv.weight, bbox_head.multi_level_cls_convs.0.1.bn.weight, bbox_head.multi_level_cls_convs.0.1.bn.bias, bbox_head.multi_level_cls_convs.0.1.bn.running_mean, bbox_head.multi_level_cls_convs.0.1.bn.running_var, bbox_head.multi_level_cls_convs.1.0.conv.weight, bbox_head.multi_level_cls_convs.1.0.bn.weight, bbox_head.multi_level_cls_convs.1.0.bn.bias, bbox_head.multi_level_cls_convs.1.0.bn.running_mean, bbox_head.multi_level_cls_convs.1.0.bn.running_var, bbox_head.multi_level_cls_convs.1.1.conv.weight, bbox_head.multi_level_cls_convs.1.1.bn.weight, bbox_head.multi_level_cls_convs.1.1.bn.bias, bbox_head.multi_level_cls_convs.1.1.bn.running_mean, bbox_head.multi_level_cls_convs.1.1.bn.running_var, bbox_head.multi_level_cls_convs.2.0.conv.weight, bbox_head.multi_level_cls_convs.2.0.bn.weight, bbox_head.multi_level_cls_convs.2.0.bn.bias, bbox_head.multi_level_cls_convs.2.0.bn.running_mean, bbox_head.multi_level_cls_convs.2.0.bn.running_var, bbox_head.multi_level_cls_convs.2.1.conv.weight, bbox_head.multi_level_cls_convs.2.1.bn.weight, bbox_head.multi_level_cls_convs.2.1.bn.bias, bbox_head.multi_level_cls_convs.2.1.bn.running_mean, bbox_head.multi_level_cls_convs.2.1.bn.running_var, bbox_head.multi_level_reg_convs.0.0.conv.weight, bbox_head.multi_level_reg_convs.0.0.bn.weight, bbox_head.multi_level_reg_convs.0.0.bn.bias, bbox_head.multi_level_reg_convs.0.0.bn.running_mean, bbox_head.multi_level_reg_convs.0.0.bn.running_var, bbox_head.multi_level_reg_convs.0.1.conv.weight, bbox_head.multi_level_reg_convs.0.1.bn.weight, bbox_head.multi_level_reg_convs.0.1.bn.bias, bbox_head.multi_level_reg_convs.0.1.bn.running_mean, bbox_head.multi_level_reg_convs.0.1.bn.running_var, bbox_head.multi_level_reg_convs.1.0.conv.weight, bbox_head.multi_level_reg_convs.1.0.bn.weight, bbox_head.multi_level_reg_convs.1.0.bn.bias, bbox_head.multi_level_reg_convs.1.0.bn.running_mean, bbox_head.multi_level_reg_convs.1.0.bn.running_var, bbox_head.multi_level_reg_convs.1.1.conv.weight, bbox_head.multi_level_reg_convs.1.1.bn.weight, bbox_head.multi_level_reg_convs.1.1.bn.bias, bbox_head.multi_level_reg_convs.1.1.bn.running_mean, bbox_head.multi_level_reg_convs.1.1.bn.running_var, bbox_head.multi_level_reg_convs.2.0.conv.weight, bbox_head.multi_level_reg_convs.2.0.bn.weight, bbox_head.multi_level_reg_convs.2.0.bn.bias, bbox_head.multi_level_reg_convs.2.0.bn.running_mean, bbox_head.multi_level_reg_convs.2.0.bn.running_var, bbox_head.multi_level_reg_convs.2.1.conv.weight, bbox_head.multi_level_reg_convs.2.1.bn.weight, bbox_head.multi_level_reg_convs.2.1.bn.bias, bbox_head.multi_level_reg_convs.2.1.bn.running_mean, bbox_head.multi_level_reg_convs.2.1.bn.running_var, bbox_head.multi_level_conv_cls.0.weight, bbox_head.multi_level_conv_cls.0.bias, bbox_head.multi_level_conv_cls.1.weight, bbox_head.multi_level_conv_cls.1.bias, bbox_head.multi_level_conv_cls.2.weight, bbox_head.multi_level_conv_cls.2.bias, bbox_head.multi_level_conv_reg.0.weight, bbox_head.multi_level_conv_reg.0.bias, bbox_head.multi_level_conv_reg.1.weight, bbox_head.multi_level_conv_reg.1.bias, bbox_head.multi_level_conv_reg.2.weight, bbox_head.multi_level_conv_reg.2.bias, bbox_head.multi_level_conv_obj.0.weight, bbox_head.multi_level_conv_obj.0.bias, bbox_head.multi_level_conv_obj.1.weight, bbox_head.multi_level_conv_obj.1.bias, bbox_head.multi_level_conv_obj.2.weight, bbox_head.multi_level_conv_obj.2.bias

Name of parameter - Initialization information

detector.backbone.stem.conv.conv.weight - torch.Size([80, 12, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stem.conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stem.conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.0.conv.weight - torch.Size([160, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.0.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.0.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.main_conv.conv.weight - torch.Size([80, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.main_conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.main_conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.short_conv.conv.weight - torch.Size([80, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.short_conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.short_conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.final_conv.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.final_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.final_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([80, 80, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.0.conv2.conv.weight - torch.Size([80, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.blocks.0.conv2.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.0.conv2.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.1.conv1.conv.weight - torch.Size([80, 80, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.blocks.1.conv1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.1.conv1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.1.conv2.conv.weight - torch.Size([80, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.blocks.1.conv2.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.1.conv2.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.2.conv1.conv.weight - torch.Size([80, 80, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.blocks.2.conv1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.2.conv1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.2.conv2.conv.weight - torch.Size([80, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.blocks.2.conv2.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.2.conv2.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.3.conv1.conv.weight - torch.Size([80, 80, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.blocks.3.conv1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.3.conv1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.3.conv2.conv.weight - torch.Size([80, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage1.1.blocks.3.conv2.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage1.1.blocks.3.conv2.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.0.conv.weight - torch.Size([320, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.main_conv.conv.weight - torch.Size([160, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.main_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.main_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.short_conv.conv.weight - torch.Size([160, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.short_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.short_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.final_conv.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.final_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.final_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.0.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.0.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.0.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.1.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.1.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.1.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.1.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.1.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.1.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.2.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.2.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.2.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.2.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.2.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.2.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.3.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.3.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.3.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.3.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.3.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.3.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.4.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.4.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.4.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.4.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.4.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.4.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.5.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.5.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.5.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.5.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.5.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.5.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.6.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.6.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.6.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.6.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.6.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.6.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.7.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.7.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.7.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.7.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.7.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.7.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.8.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.8.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.8.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.8.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.8.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.8.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.9.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.9.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.9.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.9.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.9.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.9.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.10.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.10.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.10.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.10.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.10.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.10.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.11.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.11.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.11.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.11.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage2.1.blocks.11.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage2.1.blocks.11.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.0.conv.weight - torch.Size([640, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.0.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.0.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.main_conv.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.main_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.main_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.short_conv.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.short_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.short_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.final_conv.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.final_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.final_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.0.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.0.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.0.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.1.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.1.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.1.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.1.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.1.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.1.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.2.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.2.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.2.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.2.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.2.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.2.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.3.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.3.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.3.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.3.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.3.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.3.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.4.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.4.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.4.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.4.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.4.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.4.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.5.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.5.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.5.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.5.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.5.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.5.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.6.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.6.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.6.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.6.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.6.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.6.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.7.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.7.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.7.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.7.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.7.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.7.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.8.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.8.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.8.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.8.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.8.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.8.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.9.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.9.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.9.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.9.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.9.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.9.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.10.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.10.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.10.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.10.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.10.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.10.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.11.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.11.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.11.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.11.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage3.1.blocks.11.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage3.1.blocks.11.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.0.conv.weight - torch.Size([1280, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.0.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.0.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.1.conv1.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.1.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.1.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.1.conv2.conv.weight - torch.Size([1280, 2560, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.1.conv2.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.1.conv2.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.main_conv.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.main_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.main_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.short_conv.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.short_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.short_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.final_conv.conv.weight - torch.Size([1280, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.final_conv.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.final_conv.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.0.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.blocks.0.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.0.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.1.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.blocks.1.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.1.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.1.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.blocks.1.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.1.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.2.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.blocks.2.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.2.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.2.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.blocks.2.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.2.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.3.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.blocks.3.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.3.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.3.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.backbone.stage4.2.blocks.3.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.backbone.stage4.2.blocks.3.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.reduce_layers.0.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.reduce_layers.0.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.reduce_layers.0.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.reduce_layers.1.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.reduce_layers.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.reduce_layers.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([320, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([320, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.0.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.blocks.0.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.0.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.1.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.blocks.1.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.1.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.1.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.blocks.1.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.1.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.2.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.blocks.2.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.2.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.2.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.blocks.2.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.2.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.3.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.blocks.3.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.3.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.3.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.0.blocks.3.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.0.blocks.3.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([160, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([160, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.0.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.blocks.0.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.0.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.1.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.blocks.1.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.1.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.1.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.blocks.1.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.1.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.2.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.blocks.2.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.2.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.2.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.blocks.2.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.2.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.3.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.blocks.3.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.3.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.3.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.top_down_blocks.1.blocks.3.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.top_down_blocks.1.blocks.3.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.downsamples.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.downsamples.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.downsamples.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.downsamples.1.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.downsamples.1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.downsamples.1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.0.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.blocks.0.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.0.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.1.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.blocks.1.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.1.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.1.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.blocks.1.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.1.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.2.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.blocks.2.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.2.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.2.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.blocks.2.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.2.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.3.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.blocks.3.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.3.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.3.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.0.blocks.3.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.0.blocks.3.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([1280, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.0.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.blocks.0.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.0.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.1.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.blocks.1.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.1.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.1.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.blocks.1.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.1.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.2.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.blocks.2.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.2.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.2.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.blocks.2.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.2.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.3.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.blocks.3.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.3.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.3.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.bottom_up_blocks.1.blocks.3.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.bottom_up_blocks.1.blocks.3.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.out_convs.0.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.out_convs.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.out_convs.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.out_convs.1.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.out_convs.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.out_convs.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.out_convs.2.conv.weight - torch.Size([320, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.neck.out_convs.2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.neck.out_convs.2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.0.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_cls_convs.0.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.0.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.0.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_cls_convs.0.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.0.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.1.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_cls_convs.1.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.1.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.1.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_cls_convs.1.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.1.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.2.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_cls_convs.2.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.2.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.2.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_cls_convs.2.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_cls_convs.2.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.0.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_reg_convs.0.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.0.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.0.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_reg_convs.0.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.0.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.1.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_reg_convs.1.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.1.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.1.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_reg_convs.1.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.1.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.2.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_reg_convs.2.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.2.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.2.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_reg_convs.2.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_reg_convs.2.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ByteTrack  

detector.bbox_head.multi_level_conv_cls.0.weight - torch.Size([1, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_cls.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

detector.bbox_head.multi_level_conv_cls.1.weight - torch.Size([1, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_cls.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

detector.bbox_head.multi_level_conv_cls.2.weight - torch.Size([1, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_cls.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

detector.bbox_head.multi_level_conv_reg.0.weight - torch.Size([4, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_reg.0.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_reg.1.weight - torch.Size([4, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_reg.1.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_reg.2.weight - torch.Size([4, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_reg.2.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_obj.0.weight - torch.Size([1, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_obj.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

detector.bbox_head.multi_level_conv_obj.1.weight - torch.Size([1, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_obj.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

detector.bbox_head.multi_level_conv_obj.2.weight - torch.Size([1, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

detector.bbox_head.multi_level_conv_obj.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  
2024/07/04 03:28:08 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/07/04 03:28:08 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/07/04 03:28:08 - mmengine - INFO - Checkpoints will be saved to G:\QQ\my_work\work_dirs\bytetrack_yolox_x_fpn.
